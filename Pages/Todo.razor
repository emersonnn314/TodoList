@page "/todo"
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Todo</PageTitle>

<h1 class="h1">Todo-List (Count: @todos.Count(todo => !todo.IsDone))</h1>

<table class="table">
    <thead>
        <tr>
            <th scope="col">Task</th>
            <th scope="col">Priority</th>
            <th scope="col">Done</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var todo in todos)
    {
        <tr>
            <td>
            <input class="form-control" @bind="todo.Title" />
            </td>
            <td>
            <input class="" type="number"  min="1" max="3" @bind="todo.Priority" placeholder="Priority" />
            </td>
            <td>            
             <input class="btn btn-secondary btn-sm" type="button" @onclick="() => RemoveTodo(todo)" value="Done" />
            </td>
         </tr>
    }
    </tbody>
</table>

<div class="container">
    <input class="form-control-sm col-3"  @onkeydown="Enter"  placeholder="Task" @bind="newTodo" />
    <input class="form-control-sm col-1" type="number" min="1" max="3" @bind="newPriority" placeholder="Priority" />
    <button class="btn btn-primary col-1" @onclick="AddTodo">Add todo</button>
</div>

@code {
    private List<TodoItem> todos = new();
    private string? newTodo;
    private int newPriority;

    protected override async Task OnInitializedAsync()
    {
        // Fetch tasks from local storage
        todos = await localStorage.GetItemAsync<List<TodoItem>>("todos");
        if (todos == null)
        {
            todos = new List<TodoItem>();
        }
      }
    private async Task LoadTodosFromLocalStorage()
    {
        todos = await localStorage.GetItemAsync<List<TodoItem>>("todos") ?? new List<TodoItem>();
    }

    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            newPriority = Math.Clamp(newPriority, 1, 3);
            var todo = new TodoItem { Title = newTodo, Priority = newPriority };
            todos.Add(todo);
            await localStorage.SetItemAsync(todo.Id.ToString(), todos);
            newTodo = string.Empty;
            newPriority = 0;
        }
    }
    private async Task RemoveTodo(TodoItem todo)
    {
        todos.Remove(todo); // Remove from the list in memory
        await localStorage.SetItemAsync("todos", todos); // Update the list in local storage

        // Remove the todo item itself from local storage using its unique identifier key
        await localStorage.RemoveItemAsync(todo.Id.ToString());
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddTodo();
        }
    }
    // private void RemoveTodo()
    // {
    //     todos.RemoveAll(todo => todo.IsDone);
    // }



    // private void Enter(KeyboardEventArgs e){
    //     if(e.Key == "Enter"){
    //         AddTodo();
    //     }
    // }
    // make a function that checks the status of todo
    public Boolean CheckStatus(TodoItem todo){
        if(todo.IsDone == true){
            return true;
        }
        else{
            return false;
        }
    }

}

